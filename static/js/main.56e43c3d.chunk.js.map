{"version":3,"sources":["visualization/Sorting.js","App.js","index.js"],"names":["Sorting","props","resetArray","array","createRandomArray","size","setState","test","testAlgo","i","mergeSort","length","isSorted","state","console","log","bind","merge","this","start","end","a","mid","Math","floor","left","right","push","k","j","Fragment","className","map","value","index","style","height","width","onClick","Component","min","max","random","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56e43c3d.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './Sorting.css';\n\nexport default class Sorting extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            test: false\n        }\n        this.size = props.size;\n        this.resetArray.bind(this);\n        this.testAlgo.bind(this);\n        this.mergeSort.bind(this);\n        this.merge.bind(this);\n        this.isSorted.bind(this);\n    }\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray = () => {\n        let array = createRandomArray(this.size);\n        this.setState({ array: array, test: false });\n    }\n\n\n\n\n    testAlgo = () => {\n        let array = [];\n        let iterations = 1000;\n        for (let i = 0; i < iterations; i++) {\n            array = createRandomArray(1000);\n            this.mergeSort(array, 0, array.length - 1);\n            if (!this.isSorted(array)) {\n                this.setState({ array: this.state.array, test: false });\n                return false;\n            }\n        }\n        this.setState(\n            {\n                array: this.state.array,\n                test: true\n            });\n        return true;\n    }\n\n\n    async mergeSort(array, start, end) {\n        // setTimeout(() => {\n            if (start < end) {\n                let mid = Math.floor((start + end) / 2);\n\n\n                this.mergeSort(array, start, mid);\n                this.mergeSort(array, mid + 1, end);\n                this.merge(array, start, mid, end);\n\n            }\n        // }, 10\n        // );\n\n    }\n\n    async merge(array, start, mid, end) {\n        let left = [];\n        let right = [];\n        for (let i = start; i <= mid; i++) {\n            left.push(array[i]);\n        }\n        for (let i = mid + 1; i <= end; i++) {\n            right.push(array[i]);\n        }\n        let k = start, i = 0, j = 0;\n        while (k <= end && i < left.length && j < right.length) {\n            if (left[i] < right[j]) {\n                array[k++] = left[i++];\n            }\n            else {\n                array[k++] = right[j++];\n            }\n        }\n\n        while(i<left.length){\n            array[k++]=left[i++];\n        }\n        while(j<right.length){\n            array[k++]=right[j++];\n        }\n\n        this.setState({ array: array, test: this.state.test });\n        console.log(\"fuck\");\n\n\n        // await this.delay(200);\n\n    }\n\n\n\n\n    isSorted = (array) => {\n\n        for (let i = 1; i < array.length; i++) {\n            if (array[i] < array[i - 1]) {\n                this.setState({ array: this.state.array, test: false });\n\n                return;\n                break;\n\n            }\n            console.log(i);\n        }\n        this.setState({ array: this.state.array, test: true });\n        return;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"array-container\">\n                    {\n                        this.state.array.map((value, index) => (\n                            <div className=\"array-bar\" key={index} style={{ height: `${value}px`, width: `${1200 / this.size - 2}px` }}>\n                            </div>\n                        )\n                        )}\n                </div>\n                <div className=\"control\">\n                    <button onClick={() => { this.resetArray(); console.log(this.state.array) }}>\n                        Generate new\n                    </button>\n                    <button>\n                        Sort\n                    </button>\n                    <button onClick={() => { this.mergeSort(this.state.array, 0, this.size - 1); this.isSorted(this.state.array); console.log(this.state.array); }}>\n                        Merge Sort\n                    </button>\n                    <button>\n                        Quick Sort\n                    </button>\n                    <button className={(this.state.test ? \"bg-success\" : \"bg-danger\") + \" text-white\"} onClick={() => this.isSorted(this.state.array)}>\n                        isSorted\n                    </button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n\nconst randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst createRandomArray = (size) => {\n    let array = [];\n    for (let i = 0; i < size; i++) {\n        array.push(randomIntFromInterval(5, 500));\n    }\n    return array;\n}\n\n\n\n\n\n","import './App.css';\nimport Sorting from './visualization/Sorting';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorting size=\"100\"/>\n    </div>\n  );\n}\n\nexport default App;\n//https://www.youtube.com/watch?v=-ya6CjNn0fM","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}