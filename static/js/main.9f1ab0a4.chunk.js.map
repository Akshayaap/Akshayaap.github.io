{"version":3,"sources":["visualization/Sorting.js","App.js","index.js"],"names":["Sorting","props","resetArray","array","createRandomArray","size","setState","test","console","log","state","resetAndDisplay","a","testAlgo","i","mergeSort","length","isSorted","counter","bind","merge","this","start","end","setInterval","mid","Math","floor","left","right","push","k","j","Fragment","className","map","value","index","style","height","width","onClick","Component","min","max","random","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAIqBA,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,WAAa,WACT,IAAIC,EAAQC,EAAkB,EAAKC,MACnC,EAAKC,SAAS,CAAEH,MAAOA,EAAOI,MAAM,IACpCC,QAAQC,IAAI,EAAKC,MAAMP,QAvBR,EA2BnBQ,gBA3BmB,sBA2BD,sBAAAC,EAAA,sEACR,EAAKV,aADG,OAEdM,QAAQC,IAAI,EAAKC,MAAMP,OAFT,2CA3BC,EAgCnBU,SAAW,WAGP,IAFA,IAAIV,EAAQ,GAEHW,EAAI,EAAGA,EADC,IACeA,IAG5B,GAFAX,EAAQC,EAAkB,KAC1B,EAAKW,UAAUZ,EAAO,EAAGA,EAAMa,OAAS,IACnC,EAAKC,SAASd,GAEf,OADA,EAAKG,SAAS,CAAEH,MAAO,EAAKO,MAAMP,MAAOI,MAAM,KACxC,EAQf,OALA,EAAKD,SACD,CACIH,MAAO,EAAKO,MAAMP,MAClBI,MAAM,KAEP,GAhDQ,EA4FnBU,SAAW,SAACd,GACR,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAMa,OAAQF,IAC9B,GAAIX,EAAMW,GAAKX,EAAMW,EAAI,GAErB,OADA,EAAKR,SAAS,CAAEH,MAAO,EAAKO,MAAMP,MAAOI,MAAM,KACxC,EAIf,OADA,EAAKD,SAAS,CAAEH,MAAO,EAAKO,MAAMP,MAAOI,MAAM,KACxC,GAlGP,EAAKG,MAAQ,CACTP,MAAO,GACPI,MAAM,GAEV,EAAKW,QAAQ,EACb,EAAKb,KAAOJ,EAAMI,KAClB,EAAKH,WAAWiB,KAAhB,gBAEA,EAAKN,SAASM,KAAd,gBACA,EAAKJ,UAAUI,KAAf,gBACA,EAAKC,MAAMD,KAAX,gBACA,EAAKF,SAASE,KAAd,gBAbe,E,qDAenB,WACIE,KAAKnB,e,uBAmCT,SAAUC,EAAOmB,EAAOC,GAAM,IAAD,OACzBC,aAAY,WACR,GAAIF,EAAQC,IAAQ,EAAKN,SAASd,GAAQ,CACtC,IAAIsB,EAAMC,KAAKC,OAAOL,EAAQC,GAAO,GACrC,EAAKR,UAAUZ,EAAOmB,EAAOG,GAC7B,EAAKV,UAAUZ,EAAOsB,EAAM,EAAGF,GAC/B,EAAKH,MAAMjB,EAAOmB,EAAOG,EAAKF,MAEpC,O,mBAGN,SAAMpB,EAAOmB,EAAOG,EAAKF,GAGrB,IAFA,IAAIK,EAAO,GACPC,EAAQ,GACHf,EAAIQ,EAAOR,GAAKW,EAAKX,IAC1Bc,EAAKE,KAAK3B,EAAMW,IAEpB,IAASA,EAAIW,EAAM,EAAGX,GAAKS,EAAKT,IAC5Be,EAAMC,KAAK3B,EAAMW,IAGrB,IADA,IAAIiB,EAAIT,EAAcU,GAAPlB,EAAI,EAAO,GACnBA,EAAIc,EAAKZ,QAAUgB,EAAIH,EAAMb,QAC5BY,EAAKd,GAAKe,EAAMG,GAChB7B,EAAM4B,KAAOH,EAAKd,KAGlBX,EAAM4B,KAAOF,EAAMG,KAEvBX,KAAKf,SAAS,CAAEH,MAAOA,EAAOI,KAAMc,KAAKX,MAAMH,OAGnD,KAAOO,EAAIc,EAAKZ,QACZb,EAAM4B,KAAOH,EAAKd,KAClBO,KAAKf,SAAS,CAAEH,MAAOA,EAAOI,KAAMc,KAAKX,MAAMH,OAEnD,KAAOyB,EAAIH,EAAMb,QACbb,EAAM4B,KAAOF,EAAMG,KACnBX,KAAKf,SAAS,CAAEH,MAAOA,EAAOI,KAAMc,KAAKX,MAAMH,S,oBAevD,WAAU,IAAD,OACL,OACI,eAAC,IAAM0B,SAAP,WACI,qBAAKC,UAAU,kBAAf,SAEQb,KAAKX,MAAMP,MAAMgC,KAAI,SAACC,EAAOC,GAAR,OACjB,qBAAKH,UAAU,YAAwBI,MAAO,CAAEC,OAAO,GAAD,OAAKH,EAAM,EAAX,MAAkBI,MAAM,GAAD,OAAK,KAAO,EAAKnC,KAAO,EAAxB,QAA7CgC,QAK5C,sBAAKH,UAAU,UAAf,UACI,wBAAQO,QAAS,WAAO,EAAKvC,cAA7B,0BAGA,0CAGA,wBAAQuC,QAAS,WAAO,EAAK1B,UAAU,EAAKL,MAAMP,MAAO,EAAG,EAAKE,KAAO,GAAI,EAAKY,SAAS,EAAKP,MAAMP,QAArG,wBAGA,gDAGA,wBAAQ+B,WAAYb,KAAKX,MAAMH,KAAO,aAAe,aAAe,cAAekC,QAAS,kBAAM,EAAKxB,SAAS,EAAKP,MAAMP,QAA3H,gC,GAjIiBuC,aA+I/BtC,EAAoB,SAACC,GAEvB,IADA,IAL2BsC,EAAKC,EAK5BzC,EAAQ,GACHW,EAAI,EAAGA,EAAIT,EAAMS,IACtBX,EAAM2B,MAPiBa,EAOU,EAPLC,EAOQ,IANjClB,KAAKC,MAAMD,KAAKmB,UAAYD,EAAMD,EAAM,GAAKA,KASpD,OAAOxC,GC9II2C,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,CAAS7B,KAAK,WCFpB0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9f1ab0a4.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './Sorting.css';\n\nexport default class Sorting extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            test: false\n        }\n        this.counter=1;\n        this.size = props.size;\n        this.resetArray.bind(this);\n        // this.resetAndDispaly.bind(this);\n        this.testAlgo.bind(this);\n        this.mergeSort.bind(this);\n        this.merge.bind(this);\n        this.isSorted.bind(this);\n    }\n    componentDidMount() {\n        this.resetArray();\n        // this.resetAndDisplay();\n    }\n\n    resetArray = () => {\n        var array = createRandomArray(this.size);\n        this.setState({ array: array, test: false });\n        console.log(this.state.array);\n    }\n\n    //for debug purpose only\n    resetAndDisplay = async () => {\n        await this.resetArray();\n        console.log(this.state.array);\n    }\n\n    testAlgo = () => {\n        var array = [];\n        var iterations = 1000;\n        for (var i = 0; i < iterations; i++) {\n            array = createRandomArray(1000);\n            this.mergeSort(array, 0, array.length - 1);\n            if (!this.isSorted(array)) {\n                this.setState({ array: this.state.array, test: false });\n                return false;\n            }\n        }\n        this.setState(\n            {\n                array: this.state.array,\n                test: true\n            });\n        return true;\n    }\n\n    mergeSort(array, start, end) {\n        setInterval(()=>{\n            if (start < end && !this.isSorted(array)) {\n                var mid = Math.floor((start + end) / 2);\n                this.mergeSort(array, start, mid);\n                this.mergeSort(array, mid + 1, end);\n                this.merge(array, start, mid, end);\n            }\n        },100);\n    }\n\n    merge(array, start, mid, end) {\n        var left = [];\n        var right = [];\n        for (var i = start; i <= mid; i++) {\n            left.push(array[i]);\n        }\n        for (var i = mid + 1; i <= end; i++) {\n            right.push(array[i]);\n        }\n        var k = start, i = 0, j = 0;\n        while (i < left.length && j < right.length) {\n            if (left[i] < right[j]) {\n                array[k++] = left[i++];\n            }\n            else {\n                array[k++] = right[j++];\n            }\n            this.setState({ array: array, test: this.state.test });\n        }\n\n        while (i < left.length) {\n            array[k++] = left[i++];\n            this.setState({ array: array, test: this.state.test });\n        }\n        while (j < right.length) {\n            array[k++] = right[j++];\n            this.setState({ array: array, test: this.state.test });\n        }\n    }\n\n    isSorted = (array) => {\n        for (var i = 1; i < array.length; i++) {\n            if (array[i] < array[i - 1]) {\n                this.setState({ array: this.state.array, test: false });\n                return false;\n            }\n        }\n        this.setState({ array: this.state.array, test: true });\n        return true;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"array-container\">\n                    {\n                        this.state.array.map((value, index) => (\n                            <div className=\"array-bar\" key={index} style={{ height: `${value+5}px`, width: `${1200 / this.size - 1}px` }}>\n                            </div>\n                        ))\n                    }\n                </div>\n                <div className=\"control\">\n                    <button onClick={() => {this.resetArray();  }}>\n                        Generate new\n                    </button>\n                    <button>\n                        Sort\n                    </button>\n                    <button onClick={() => {this.mergeSort(this.state.array, 0, this.size - 1); this.isSorted(this.state.array);}}>\n                        Merge Sort\n                    </button>\n                    <button>\n                        Quick Sort\n                    </button>\n                    <button className={(this.state.test ? \"bg-success\" : \"bg-danger\") + \" text-white\"} onClick={() => this.isSorted(this.state.array)}>\n                        isSorted\n                    </button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n\nconst randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst createRandomArray = (size) => {\n    var array = [];\n    for (var i = 0; i < size; i++) {\n        array.push(randomIntFromInterval(5, 500));\n\n    }\n    return array;\n}\n\n\n\n\n\n","import './App.css';\nimport Sorting from './visualization/Sorting';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorting size=\"150\"/>\n    </div>\n  );\n}\n\nexport default App;\n//https://www.youtube.com/watch?v=-ya6CjNn0fM","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}